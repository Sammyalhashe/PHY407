##################################
Pseudo code for Q2
##################################

# IMPORT modules numpy, matplotlib, and time

# SET L = 40 m, D = 50 m, delta = 2, A = 1, target = 1e-4

# Set the xpoints and zpoints to 0 < x < L and -D < z < 0

# Initialize an empty array for eta 

# Initialize an empty array for phi

# DEFINE initial phi(x, t=0) = 0, or just do nothing

# START timing

# Set eta(x, t=0) = eta0(x) = -A*np.exp(-(x-L/2)**2/delta**2) initial cond. 

# USE Euler forward method to get eta(t = h/2) and phi(z = 0, t = h/2)

# CREATE a function called Laplace that solves the laplace equation for phi(x, z, t = h/2)
# using the vectorized Jacobi method. 

# CALL the function I just made

# USE finite differences and calculate the differential of phi(z=0, t = h/2)

# CREATE a list for eta and phi to store the values 

# START the leapfrogging loop
	# CALCULATE the full eta and phi steps using the derivative at the half step
	# SOLVE the laplace equation for the full step of phi
	# INCREMENT t by h
	# CALCULATE the next halfstep using the diff at the full step
	# SOLVE the laplace equation again for the half step of phi
	# APPEND the eta and phi values to our list
	# INCREMENT t and i by h/2 and 1 respectively
	# PRINT each t and i so we know which index of the array gives us which time 

# DEFINE points to plot using the i's we found above 

# PLOT x vs eta for the request times (or more)

# STOP timing and print the time it took for the simulation to run

########################################### DONE ####################################################